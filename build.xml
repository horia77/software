<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->

<project default="compile">

<property location="./JavaApplication4/src/add" name="src.java.dir"/>

<property location="./JavaApplication4/test/testing" name="src.test.dir"/>

<property location="./target" name="result.dir"/>

<property location="${result.dir}/classes" name="result.javaclasses.dir"/>

<property location="${result.dir}/testclasses" name="result.testclasses.dir"/>


<path id="NecessaryLibraries">

<pathelement location="./UsedLibraries/junit-4.12.jar"/>

<!--matcher-->


<pathelement location="./UsedLibraries/hamcrest-core-1.3.jar"/>

<!--<pathelement location="./UsedLibraries/jacocoant.jar"/>-->

</path>


<target name="compile">

<mkdir dir="${result.javaclasses.dir}"/>

<javac includeantruntime="false" debug="true" destdir="${result.javaclasses.dir}" srcdir="${src.java.dir}"> </javac>

</target>


<target name="compile-testcases" depends="compile">

<mkdir dir="${result.testclasses.dir}"/>


<javac includeantruntime="false" debug="true" destdir="${result.testclasses.dir}" srcdir="${src.test.dir}">


-<classpath>

<path refid="NecessaryLibraries"/>

<pathelement location="${result.javaclasses.dir}"/>

</classpath>

</javac>

</target>


<target name="test" depends="compile-testcases">

<!--fork : each test will run in its own JVM (to seperate test cases)-->



<junit fork="true" haltonfailure="true" printsummary="true">


<classpath>

<path refid="NecessaryLibraries"/>

<pathelement location="${result.javaclasses.dir}"/>

<pathelement location="${result.testclasses.dir}"/>

</classpath>

<formatter usefile="false" type="brief"/>


<batchtest>


<fileset dir="${result.testclasses.dir}">

<include name="**/*Test.class"/>

</fileset>

</batchtest>

</junit>

</target>

</project>

    

